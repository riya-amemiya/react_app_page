{"version":3,"sources":["img/svg/logo.svg","img/svg/1.svg","img/svg/2.svg","img/svg/3.svg","img/svg/4.svg","img/svg/5.svg","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","animate","imgs","url","img0","num","img1","img2","img3","img4","App","props","state","show","Math","floor","random","length","this","setState","className","src","alt","onError","e","target","noimg","map","img","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,kSCQrCC,EAAU,CACf,sBACA,oBACA,sBACA,uBACA,wBACA,sBACA,wBACA,yBACA,sBACA,sBACA,uBACA,qBAEKC,EAAO,CACZ,CACCC,IAAKC,IACLC,IAAK,GAEN,CACCF,IAAKG,IACLD,IAAK,GAEN,CACCF,IAAKI,IACLF,IAAK,GAEN,CACCF,IAAKK,IACLH,IAAK,GAEN,CACCF,IAAKM,IACLJ,IAAK,IAmDQK,E,kDA/Cd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,KAAM,EACNR,IAAK,GAJY,E,qDASlB,IADA,IAAIA,EAAMS,KAAKC,MAAMD,KAAKE,SAAWf,EAAQgB,QACtCC,KAAKN,MAAMP,KAAOA,GACxBA,EAAMS,KAAKC,MAAMD,KAAKE,SAAWf,EAAQgB,QAE1CC,KAAKC,SAAS,CAAEd,IAAKA,M,+BAEZ,IAAD,OACR,OACC,yBAAKe,UAAU,OACd,4BAAQA,UAAU,cACjB,wDACA,yBACCA,UAAS,4BAAuBnB,EAAQiB,KAAKN,MAAMP,MACnDgB,IAAKnB,EAAKgB,KAAKN,MAAMC,MAAMV,IAC3BmB,IAAI,GACJC,QAAS,SAACC,GAAD,OAAQA,EAAEC,OAAOJ,IAAMK,OAEjC,yBAAKN,UAAU,OACblB,EAAKyB,KAAI,SAACC,GACV,OACC,yBACCC,IAAKD,EAAIvB,IACTe,UAAS,MACTC,IAAKO,EAAIzB,IACTmB,IAAI,GACJC,QAAS,SAACC,GAAD,OAAQA,EAAEC,OAAOJ,IAAMK,KAChCI,QAAS,WACR,EAAKX,SAAS,CAAEN,KAAMe,EAAIvB,MAC1B,EAAKW,sB,GArCGe,IAAMC,WChCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c3001275.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d2bb228.svg\";","module.exports = __webpack_public_path__ + \"static/media/1.39633c7d.svg\";","module.exports = __webpack_public_path__ + \"static/media/2.00089aa7.svg\";","module.exports = __webpack_public_path__ + \"static/media/3.bf2eaa67.svg\";","module.exports = __webpack_public_path__ + \"static/media/4.4986a574.svg\";","module.exports = __webpack_public_path__ + \"static/media/5.fb355838.svg\";","import React from \"react\";\nimport \"./App.scss\";\nimport noimg from \"./img/svg/logo.svg\";\nimport img0 from \"./img/svg/1.svg\";\nimport img1 from \"./img/svg/2.svg\";\nimport img2 from \"./img/svg/3.svg\";\nimport img3 from \"./img/svg/4.svg\";\nimport img4 from \"./img/svg/5.svg\";\nconst animate = [\n\t\"animate__backInDown\",\n\t\"animate__backInUp\",\n\t\"animate__backInLeft\",\n\t\"animate__backInRight\",\n\t\"animate__bounceInDown\",\n\t\"animate__bounceInUp\",\n\t\"animate__bounceInLeft\",\n\t\"animate__bounceInRight\",\n\t\"animate__zoomInDown\",\n\t\"animate__zoomInLeft\",\n\t\"animate__zoomInRight\",\n\t\"animate__zoomInUp\",\n];\nconst imgs = [\n\t{\n\t\turl: img0,\n\t\tnum: 0,\n\t},\n\t{\n\t\turl: img1,\n\t\tnum: 1,\n\t},\n\t{\n\t\turl: img2,\n\t\tnum: 2,\n\t},\n\t{\n\t\turl: img3,\n\t\tnum: 3,\n\t},\n\t{\n\t\turl: img4,\n\t\tnum: 4,\n\t},\n];\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tshow: 0,\n\t\t\tnum: 0,\n\t\t};\n\t}\n\trandom() {\n\t\tlet num = Math.floor(Math.random() * animate.length);\n\t\twhile (this.state.num == num) {\n\t\t\tnum = Math.floor(Math.random() * animate.length);\n\t\t}\n\t\tthis.setState({ num: num });\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1>アルバム</h1>\n\t\t\t\t\t<img\n\t\t\t\t\t\tclassName={`animate__animated ${animate[this.state.num]}`}\n\t\t\t\t\t\tsrc={imgs[this.state.show].url}\n\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\tonError={(e) => (e.target.src = noimg)}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"div\">\n\t\t\t\t\t\t{imgs.map((img) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tkey={img.num}\n\t\t\t\t\t\t\t\t\tclassName={`img`}\n\t\t\t\t\t\t\t\t\tsrc={img.url}\n\t\t\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\t\t\tonError={(e) => (e.target.src = noimg)}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tthis.setState({ show: img.num });\n\t\t\t\t\t\t\t\t\t\tthis.random();\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}