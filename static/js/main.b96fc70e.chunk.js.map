{"version":3,"sources":["img/svg/logo.svg","img/svg/1.svg","img/svg/2.svg","img/svg/3.svg","img/svg/4.svg","img/svg/5.svg","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","imgs","url","img0","num","img1","img2","img3","img4","App","props","state","show","className","src","this","alt","onError","e","target","noimg","map","img","key","onClick","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,kSCQrCC,EAAO,CACX,CACEC,IAAKC,IACLC,IAAK,GAEP,CACEF,IAAKG,IACLD,IAAK,GAGP,CACEF,IAAKI,IACLF,IAAK,GAGP,CACEF,IAAKK,IACLH,IAAK,GAGP,CACEF,IAAKM,IACLJ,IAAK,IA8CMK,E,kDAxCb,WAAYC,GACX,IAAD,8BACE,cAAMA,IACDC,MAAQ,CACXC,KAAM,GAHV,E,qDAOC,IAAD,OACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,wDACA,yBACEC,IAAKb,EAAKc,KAAKJ,MAAMC,MAAMV,IAC3Bc,IAAI,GACJC,QAAS,SAACC,GAAD,OAAOA,EAAEC,OAAOL,IAAMM,OAEjC,yBAAKP,UAAU,OACZZ,EAAKoB,KAAI,SAACC,GAET,OACE,yBACEC,IAAKD,EAAIlB,IACTS,UAAS,MACTC,IAAKQ,EAAIpB,IACTc,IAAI,GACJC,QAAS,SAACC,GAAD,OAAOA,EAAEC,OAAOL,IAAMM,KAC/BI,QAAS,WAAQ,EAAKC,SAAS,CAAEb,KAAMU,EAAIlB,mB,GA9B3CsB,IAAMC,WCtBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b96fc70e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d2bb228.svg\";","module.exports = __webpack_public_path__ + \"static/media/1.39633c7d.svg\";","module.exports = __webpack_public_path__ + \"static/media/2.00089aa7.svg\";","module.exports = __webpack_public_path__ + \"static/media/3.bf2eaa67.svg\";","module.exports = __webpack_public_path__ + \"static/media/4.4986a574.svg\";","module.exports = __webpack_public_path__ + \"static/media/5.fb355838.svg\";","import React from 'react';\nimport './App.scss';\nimport noimg from './img/svg/logo.svg'\nimport img0 from './img/svg/1.svg'\nimport img1 from './img/svg/2.svg'\nimport img2 from './img/svg/3.svg'\nimport img3 from './img/svg/4.svg'\nimport img4 from './img/svg/5.svg'\nconst imgs = [\n  {\n    url: img0,\n    num: 0\n  },\n  {\n    url: img1,\n    num: 1\n\n  },\n  {\n    url: img2,\n    num: 2\n\n  },\n  {\n    url: img3,\n    num: 3\n\n  },\n  {\n    url: img4,\n    num: 4\n\n  },\n]\nclass App extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      show: 0\n    }\n  }\n  render()\n  {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>アルバム</h1>\n          <img\n            src={imgs[this.state.show].url}\n            alt=\"\"\n            onError={(e) => e.target.src = noimg}\n          />\n          <div className=\"div\">\n            {imgs.map((img) =>\n            {\n              return (\n                <img\n                  key={img.num}\n                  className={`img`}\n                  src={img.url}\n                  alt=\"\"\n                  onError={(e) => e.target.src = noimg}\n                  onClick={() => { this.setState({ show: img.num }); }}\n                />\n              )\n            })}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}